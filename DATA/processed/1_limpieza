{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "93b75018",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "efda3ec8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"C:/Users/aleja/Desktop/Analisis de datos08-10-2022/clase8/data/ames_housing/ames.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a28d4c46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of       Order        PID  MS.SubClass MS.Zoning  Lot.Frontage  Lot.Area Street  \\\n",
       "0         1  526301100           20        RL         141.0     31770   Pave   \n",
       "1         2  526350040           20        RH          80.0     11622   Pave   \n",
       "2         3  526351010           20        RL          81.0     14267   Pave   \n",
       "3         4  526353030           20        RL          93.0     11160   Pave   \n",
       "4         5  527105010           60        RL          74.0     13830   Pave   \n",
       "...     ...        ...          ...       ...           ...       ...    ...   \n",
       "2925   2926  923275080           80        RL          37.0      7937   Pave   \n",
       "2926   2927  923276100           20        RL           NaN      8885   Pave   \n",
       "2927   2928  923400125           85        RL          62.0     10441   Pave   \n",
       "2928   2929  924100070           20        RL          77.0     10010   Pave   \n",
       "2929   2930  924151050           60        RL          74.0      9627   Pave   \n",
       "\n",
       "     Alley Lot.Shape Land.Contour  ... Pool.Area Pool.QC  Fence Misc.Feature  \\\n",
       "0      NaN       IR1          Lvl  ...         0     NaN    NaN          NaN   \n",
       "1      NaN       Reg          Lvl  ...         0     NaN  MnPrv          NaN   \n",
       "2      NaN       IR1          Lvl  ...         0     NaN    NaN         Gar2   \n",
       "3      NaN       Reg          Lvl  ...         0     NaN    NaN          NaN   \n",
       "4      NaN       IR1          Lvl  ...         0     NaN  MnPrv          NaN   \n",
       "...    ...       ...          ...  ...       ...     ...    ...          ...   \n",
       "2925   NaN       IR1          Lvl  ...         0     NaN  GdPrv          NaN   \n",
       "2926   NaN       IR1          Low  ...         0     NaN  MnPrv          NaN   \n",
       "2927   NaN       Reg          Lvl  ...         0     NaN  MnPrv         Shed   \n",
       "2928   NaN       Reg          Lvl  ...         0     NaN    NaN          NaN   \n",
       "2929   NaN       Reg          Lvl  ...         0     NaN    NaN          NaN   \n",
       "\n",
       "     Misc.Val Mo.Sold Yr.Sold Sale.Type  Sale.Condition  SalePrice  \n",
       "0           0       5    2010       WD           Normal     215000  \n",
       "1           0       6    2010       WD           Normal     105000  \n",
       "2       12500       6    2010       WD           Normal     172000  \n",
       "3           0       4    2010       WD           Normal     244000  \n",
       "4           0       3    2010       WD           Normal     189900  \n",
       "...       ...     ...     ...       ...             ...        ...  \n",
       "2925        0       3    2006       WD           Normal     142500  \n",
       "2926        0       6    2006       WD           Normal     131000  \n",
       "2927      700       7    2006       WD           Normal     132000  \n",
       "2928        0       4    2006       WD           Normal     170000  \n",
       "2929        0      11    2006       WD           Normal     188000  \n",
       "\n",
       "[2930 rows x 82 columns]>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()\n",
    "df.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b6d792fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PID</th>\n",
       "      <th>Enclosed.Porch</th>\n",
       "      <th>Kitchen.AbvGr</th>\n",
       "      <th>Overall.Cond</th>\n",
       "      <th>MS.SubClass</th>\n",
       "      <th>Low.Qual.Fin.SF</th>\n",
       "      <th>Bsmt.Half.Bath</th>\n",
       "      <th>Order</th>\n",
       "      <th>Yr.Sold</th>\n",
       "      <th>Misc.Val</th>\n",
       "      <th>...</th>\n",
       "      <th>Year.Remod.Add</th>\n",
       "      <th>Full.Bath</th>\n",
       "      <th>Year.Built</th>\n",
       "      <th>X1st.Flr.SF</th>\n",
       "      <th>Total.Bsmt.SF</th>\n",
       "      <th>Garage.Area</th>\n",
       "      <th>Garage.Cars</th>\n",
       "      <th>Gr.Liv.Area</th>\n",
       "      <th>Overall.Qual</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>SalePrice</th>\n",
       "      <td>-0.246521</td>\n",
       "      <td>-0.128787</td>\n",
       "      <td>-0.119814</td>\n",
       "      <td>-0.101697</td>\n",
       "      <td>-0.085092</td>\n",
       "      <td>-0.03766</td>\n",
       "      <td>-0.035835</td>\n",
       "      <td>-0.031408</td>\n",
       "      <td>-0.030569</td>\n",
       "      <td>-0.015691</td>\n",
       "      <td>...</td>\n",
       "      <td>0.532974</td>\n",
       "      <td>0.545604</td>\n",
       "      <td>0.558426</td>\n",
       "      <td>0.621676</td>\n",
       "      <td>0.63228</td>\n",
       "      <td>0.640401</td>\n",
       "      <td>0.647877</td>\n",
       "      <td>0.70678</td>\n",
       "      <td>0.799262</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                PID  Enclosed.Porch  Kitchen.AbvGr  Overall.Cond  MS.SubClass  \\\n",
       "SalePrice -0.246521       -0.128787      -0.119814     -0.101697    -0.085092   \n",
       "\n",
       "           Low.Qual.Fin.SF  Bsmt.Half.Bath     Order   Yr.Sold  Misc.Val  ...  \\\n",
       "SalePrice         -0.03766       -0.035835 -0.031408 -0.030569 -0.015691  ...   \n",
       "\n",
       "           Year.Remod.Add  Full.Bath  Year.Built  X1st.Flr.SF  Total.Bsmt.SF  \\\n",
       "SalePrice        0.532974   0.545604    0.558426     0.621676        0.63228   \n",
       "\n",
       "           Garage.Area  Garage.Cars  Gr.Liv.Area  Overall.Qual  SalePrice  \n",
       "SalePrice     0.640401     0.647877      0.70678      0.799262        1.0  \n",
       "\n",
       "[1 rows x 39 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame([df.corr()['SalePrice'].sort_values()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e377e883",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x17c9c758b50>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Se quitan los outliers\n",
    "index_drop=df[(df['Gr.Liv.Area']>4000) & (df['SalePrice']<400000)].index\n",
    "df=df.drop(index_drop, axis=0)\n",
    "sns.scatterplot(x='Gr.Liv.Area', y='SalePrice', data=df, color='blue')\n",
    "sns.scatterplot(x='Gr.Liv.Area', y='SalePrice', data=df, color='pink')\n",
    "plt.axhline(y=200000, color='m')\n",
    "plt.axvline(x=4000, color='m')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "28d1b9ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Se remueve la columna PID, dado ue ya se tiene un identificador Ãºnico y mantener esta columna no aportarÃ­a en ningÃºn sentido\n",
    "#el trabajo que se estÃ¡ realizando.\n",
    "\n",
    "df= df.drop('PID', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e4ff03d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Order              0.00000\n",
       "MS.SubClass        0.00000\n",
       "MS.Zoning          0.00000\n",
       "Lot.Frontage      16.74069\n",
       "Lot.Area           0.00000\n",
       "                    ...   \n",
       "Mo.Sold            0.00000\n",
       "Yr.Sold            0.00000\n",
       "Sale.Type          0.00000\n",
       "Sale.Condition     0.00000\n",
       "SalePrice          0.00000\n",
       "Length: 81, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#se buscarÃ¡ la cantidad de datos faltantes o datos nulos en las variables\n",
    "100*(df.isnull().sum()/len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4f6fe7fa",
   "metadata": {},
   "outputs": [],
   "source": [
    " # se realiza una funciÃ³n para calcular el porcentaje de datos faltantes en cada columna.\n",
    "    \n",
    "def missing_percent(df):\n",
    "    nan_percent= 100*(df.isnull().sum()/len(df))\n",
    "    nan_percent= nan_percent[nan_percent>0].sort_values()\n",
    "    return nan_percent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6abf54df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Electrical         0.034165\n",
       "Garage.Area        0.034165\n",
       "Total.Bsmt.SF      0.034165\n",
       "Bsmt.Unf.SF        0.034165\n",
       "BsmtFin.SF.1       0.034165\n",
       "BsmtFin.SF.2       0.034165\n",
       "Garage.Cars        0.034165\n",
       "Bsmt.Full.Bath     0.068329\n",
       "Bsmt.Half.Bath     0.068329\n",
       "Mas.Vnr.Area       0.785787\n",
       "Mas.Vnr.Type       0.785787\n",
       "BsmtFin.Type.1     2.733174\n",
       "Bsmt.Qual          2.733174\n",
       "Bsmt.Cond          2.733174\n",
       "BsmtFin.Type.2     2.767339\n",
       "Bsmt.Exposure      2.835668\n",
       "Garage.Type        5.363854\n",
       "Garage.Finish      5.432183\n",
       "Garage.Qual        5.432183\n",
       "Garage.Cond        5.432183\n",
       "Garage.Yr.Blt      5.432183\n",
       "Lot.Frontage      16.740690\n",
       "Fireplace.Qu      48.582166\n",
       "Fence             80.457807\n",
       "Alley             93.235395\n",
       "Misc.Feature      96.412709\n",
       "Pool.QC           99.590024\n",
       "dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nan_percent= missing_percent(df)\n",
    "nan_percent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1d55bcff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Electrical        0.034165\n",
       "Garage.Area       0.034165\n",
       "Total.Bsmt.SF     0.034165\n",
       "Bsmt.Unf.SF       0.034165\n",
       "BsmtFin.SF.1      0.034165\n",
       "BsmtFin.SF.2      0.034165\n",
       "Garage.Cars       0.034165\n",
       "Bsmt.Full.Bath    0.068329\n",
       "Bsmt.Half.Bath    0.068329\n",
       "Mas.Vnr.Area      0.785787\n",
       "Mas.Vnr.Type      0.785787\n",
       "dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Todas las variables a las que les falten datos deben ser revisadas.\n",
    "\n",
    "#Se elije un umbral del 1%.\n",
    "\n",
    "nan_percent[nan_percent < 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ebc97f7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Electrical', 'Garage.Area', 'Total.Bsmt.SF', 'Bsmt.Unf.SF',\n",
       "       'BsmtFin.SF.1', 'BsmtFin.SF.2', 'Garage.Cars', 'Bsmt.Full.Bath',\n",
       "       'Bsmt.Half.Bath', 'Mas.Vnr.Area', 'Mas.Vnr.Type'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nan_percent[nan_percent<1].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f7eada18",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dropping Rows:\n",
    "df= df.dropna(axis=0, subset=['Electrical', 'Garage.Area'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ed77c031",
   "metadata": {},
   "outputs": [],
   "source": [
    "#DespuÃ©s de verificar la documentaciÃ³n de datos, muestra que el valor que falta en las variables del sÃ³tano se debe a que no hay sÃ³tano.\n",
    "#DecisiÃ³n: Completar datos segÃºn la columna: base numÃ©rica y cadena descriptiva:\n",
    "\n",
    "#Numerical Columns fill with 0:\n",
    "bsmt_num_cols= ['BsmtFin.SF.1', 'BsmtFin.SF.2', 'Bsmt.Unf.SF','Total.Bsmt.SF' ,'Bsmt.Full.Bath', 'Bsmt.Half.Bath']\n",
    "df[bsmt_num_cols]=df[bsmt_num_cols].fillna(0)\n",
    "\n",
    "#String Columns fill with None:\n",
    "bsmt_str_cols= ['Bsmt.Qual', 'Bsmt.Cond', 'Bsmt.Exposure', 'BsmtFin.Type.1', 'BsmtFin.Type.2']\n",
    "df[bsmt_str_cols]= df[bsmt_str_cols].fillna('None')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c124cd36",
   "metadata": {},
   "outputs": [],
   "source": [
    "##Mas Vnr Features:\n",
    "df[\"Mas.Vnr.Type\"]= df[\"Mas.Vnr.Type\"].fillna(\"None\")\n",
    "df[\"Mas.Vnr.Area\"]= df[\"Mas.Vnr.Area\"].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a579ea4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Filling the missing Value:\n",
    "Gar_str_cols= ['Garage.Type', 'Garage.Finish', 'Garage.Qual', 'Garage.Cond']\n",
    "df[Gar_str_cols]=df[Gar_str_cols].fillna('None')\n",
    "\n",
    "df['Garage.Yr.Blt']=df['Garage.Yr.Blt'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f1df05e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Garage.Type', 'Garage.Yr.Blt', 'Garage.Finish', 'Garage.Qual',\n",
       "       'Garage.Cond', 'Lot.Frontage', 'Fireplace.Qu', 'Fence', 'Alley',\n",
       "       'Misc.Feature', 'Pool.QC'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Working based on Columns Missing Data\n",
    "nan_percent.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d3defac4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df= df.drop(['Fence', 'Alley', 'Misc.Feature','Pool.QC'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "93b88bf4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['NAmes', 'Gilbert', 'StoneBr', 'NWAmes', 'Somerst', 'BrDale',\n",
       "       'NPkVill', 'NridgHt', 'Blmngtn', 'NoRidge', 'SawyerW', 'Sawyer',\n",
       "       'Greens', 'BrkSide', 'OldTown', 'IDOTRR', 'ClearCr', 'SWISU',\n",
       "       'Edwards', 'CollgCr', 'Crawfor', 'Blueste', 'Mitchel', 'Timber',\n",
       "       'MeadowV', 'Veenker', 'GrnHill', 'Landmrk'], dtype=object)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " #Imputation of Missing Data\n",
    "df['Neighborhood'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5f22cb55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pandas.core.groupby.generic.SeriesGroupBy object at 0x0000017C9C83C640>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Impute missing data based on other columns:\n",
    "\n",
    "df.groupby('Neighborhood')['Lot.Frontage']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "434eb3f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Neighborhood\n",
       "Blmngtn    46.900000\n",
       "Blueste    27.300000\n",
       "BrDale     21.500000\n",
       "BrkSide    55.789474\n",
       "ClearCr    88.150000\n",
       "CollgCr    71.336364\n",
       "Crawfor    69.951807\n",
       "Edwards    64.794286\n",
       "Gilbert    74.207207\n",
       "Greens     41.000000\n",
       "GrnHill          NaN\n",
       "IDOTRR     62.383721\n",
       "Landmrk          NaN\n",
       "MeadowV    25.606061\n",
       "Mitchel    75.144444\n",
       "NAmes      75.210667\n",
       "NPkVill    28.142857\n",
       "NWAmes     81.517647\n",
       "NoRidge    91.629630\n",
       "NridgHt    84.184049\n",
       "OldTown    61.777293\n",
       "SWISU      59.068182\n",
       "Sawyer     74.551020\n",
       "SawyerW    70.669811\n",
       "Somerst    64.549383\n",
       "StoneBr    62.173913\n",
       "Timber     81.303571\n",
       "Veenker    72.000000\n",
       "Name: Lot.Frontage, dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('Neighborhood')['Lot.Frontage'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4abf1916",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Lot.Frontage']=df.groupby('Neighborhood')['Lot.Frontage'].transform(lambda val: val.fillna(val.mean()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "90537c21",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Lot.Frontage']= df['Lot.Frontage'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04cdfaa3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ahora, no tenemos ningÃºn dato faltante.\n",
    "#Se debe realizar un Manejo de datos categÃ³ricos\n",
    "#Debemos tener cuidado cuando se trata de codificar categÃ³ricamente como nÃºmeros. Queremos asegurarnos de que la relaciÃ³n numÃ©rica\n",
    "#tiene sentido para el modelo. Por ejemplo, la codificaciÃ³n MSSubClass es esencialmente solo un cÃ³digo por clase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9568c49d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       20\n",
       "1       20\n",
       "2       20\n",
       "3       20\n",
       "4       60\n",
       "        ..\n",
       "2925    80\n",
       "2926    20\n",
       "2927    85\n",
       "2928    20\n",
       "2929    60\n",
       "Name: MS.SubClass, Length: 2925, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['MS.SubClass']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2e90851c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2925 entries, 0 to 2929\n",
      "Data columns (total 77 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   Order            2925 non-null   int64  \n",
      " 1   MS.SubClass      2925 non-null   int64  \n",
      " 2   MS.Zoning        2925 non-null   object \n",
      " 3   Lot.Frontage     2925 non-null   float64\n",
      " 4   Lot.Area         2925 non-null   int64  \n",
      " 5   Street           2925 non-null   object \n",
      " 6   Lot.Shape        2925 non-null   object \n",
      " 7   Land.Contour     2925 non-null   object \n",
      " 8   Utilities        2925 non-null   object \n",
      " 9   Lot.Config       2925 non-null   object \n",
      " 10  Land.Slope       2925 non-null   object \n",
      " 11  Neighborhood     2925 non-null   object \n",
      " 12  Condition.1      2925 non-null   object \n",
      " 13  Condition.2      2925 non-null   object \n",
      " 14  Bldg.Type        2925 non-null   object \n",
      " 15  House.Style      2925 non-null   object \n",
      " 16  Overall.Qual     2925 non-null   int64  \n",
      " 17  Overall.Cond     2925 non-null   int64  \n",
      " 18  Year.Built       2925 non-null   int64  \n",
      " 19  Year.Remod.Add   2925 non-null   int64  \n",
      " 20  Roof.Style       2925 non-null   object \n",
      " 21  Roof.Matl        2925 non-null   object \n",
      " 22  Exterior.1st     2925 non-null   object \n",
      " 23  Exterior.2nd     2925 non-null   object \n",
      " 24  Mas.Vnr.Type     2925 non-null   object \n",
      " 25  Mas.Vnr.Area     2925 non-null   float64\n",
      " 26  Exter.Qual       2925 non-null   object \n",
      " 27  Exter.Cond       2925 non-null   object \n",
      " 28  Foundation       2925 non-null   object \n",
      " 29  Bsmt.Qual        2925 non-null   object \n",
      " 30  Bsmt.Cond        2925 non-null   object \n",
      " 31  Bsmt.Exposure    2925 non-null   object \n",
      " 32  BsmtFin.Type.1   2925 non-null   object \n",
      " 33  BsmtFin.SF.1     2925 non-null   float64\n",
      " 34  BsmtFin.Type.2   2925 non-null   object \n",
      " 35  BsmtFin.SF.2     2925 non-null   float64\n",
      " 36  Bsmt.Unf.SF      2925 non-null   float64\n",
      " 37  Total.Bsmt.SF    2925 non-null   float64\n",
      " 38  Heating          2925 non-null   object \n",
      " 39  Heating.QC       2925 non-null   object \n",
      " 40  Central.Air      2925 non-null   object \n",
      " 41  Electrical       2925 non-null   object \n",
      " 42  X1st.Flr.SF      2925 non-null   int64  \n",
      " 43  X2nd.Flr.SF      2925 non-null   int64  \n",
      " 44  Low.Qual.Fin.SF  2925 non-null   int64  \n",
      " 45  Gr.Liv.Area      2925 non-null   int64  \n",
      " 46  Bsmt.Full.Bath   2925 non-null   float64\n",
      " 47  Bsmt.Half.Bath   2925 non-null   float64\n",
      " 48  Full.Bath        2925 non-null   int64  \n",
      " 49  Half.Bath        2925 non-null   int64  \n",
      " 50  Bedroom.AbvGr    2925 non-null   int64  \n",
      " 51  Kitchen.AbvGr    2925 non-null   int64  \n",
      " 52  Kitchen.Qual     2925 non-null   object \n",
      " 53  TotRms.AbvGrd    2925 non-null   int64  \n",
      " 54  Functional       2925 non-null   object \n",
      " 55  Fireplaces       2925 non-null   int64  \n",
      " 56  Fireplace.Qu     1505 non-null   object \n",
      " 57  Garage.Type      2925 non-null   object \n",
      " 58  Garage.Yr.Blt    2925 non-null   float64\n",
      " 59  Garage.Finish    2925 non-null   object \n",
      " 60  Garage.Cars      2925 non-null   float64\n",
      " 61  Garage.Area      2925 non-null   float64\n",
      " 62  Garage.Qual      2925 non-null   object \n",
      " 63  Garage.Cond      2925 non-null   object \n",
      " 64  Paved.Drive      2925 non-null   object \n",
      " 65  Wood.Deck.SF     2925 non-null   int64  \n",
      " 66  Open.Porch.SF    2925 non-null   int64  \n",
      " 67  Enclosed.Porch   2925 non-null   int64  \n",
      " 68  X3Ssn.Porch      2925 non-null   int64  \n",
      " 69  Screen.Porch     2925 non-null   int64  \n",
      " 70  Pool.Area        2925 non-null   int64  \n",
      " 71  Misc.Val         2925 non-null   int64  \n",
      " 72  Mo.Sold          2925 non-null   int64  \n",
      " 73  Yr.Sold          2925 non-null   int64  \n",
      " 74  Sale.Type        2925 non-null   object \n",
      " 75  Sale.Condition   2925 non-null   object \n",
      " 76  SalePrice        2925 non-null   int64  \n",
      "dtypes: float64(11), int64(27), object(39)\n",
      "memory usage: 1.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "7bb2a25c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 20,  60, 120,  50,  85, 160,  80,  30,  90, 190,  45,  70,  75,\n",
       "        40, 180, 150], dtype=int64)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['MS.SubClass'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "fe493dfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       20\n",
       "1       20\n",
       "2       20\n",
       "3       20\n",
       "4       60\n",
       "        ..\n",
       "2925    80\n",
       "2926    20\n",
       "2927    85\n",
       "2928    20\n",
       "2929    60\n",
       "Name: MS.SubClass, Length: 2925, dtype: object"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Convert to String:\n",
    "df['MS.SubClass']= df['MS.SubClass'].apply(str)\n",
    "df['MS.SubClass']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7befd5ed",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2925 entries, 0 to 2929\n",
      "Data columns (total 77 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   Order            2925 non-null   int64  \n",
      " 1   MS.SubClass      2925 non-null   object \n",
      " 2   MS.Zoning        2925 non-null   object \n",
      " 3   Lot.Frontage     2925 non-null   float64\n",
      " 4   Lot.Area         2925 non-null   int64  \n",
      " 5   Street           2925 non-null   object \n",
      " 6   Lot.Shape        2925 non-null   object \n",
      " 7   Land.Contour     2925 non-null   object \n",
      " 8   Utilities        2925 non-null   object \n",
      " 9   Lot.Config       2925 non-null   object \n",
      " 10  Land.Slope       2925 non-null   object \n",
      " 11  Neighborhood     2925 non-null   object \n",
      " 12  Condition.1      2925 non-null   object \n",
      " 13  Condition.2      2925 non-null   object \n",
      " 14  Bldg.Type        2925 non-null   object \n",
      " 15  House.Style      2925 non-null   object \n",
      " 16  Overall.Qual     2925 non-null   int64  \n",
      " 17  Overall.Cond     2925 non-null   int64  \n",
      " 18  Year.Built       2925 non-null   int64  \n",
      " 19  Year.Remod.Add   2925 non-null   int64  \n",
      " 20  Roof.Style       2925 non-null   object \n",
      " 21  Roof.Matl        2925 non-null   object \n",
      " 22  Exterior.1st     2925 non-null   object \n",
      " 23  Exterior.2nd     2925 non-null   object \n",
      " 24  Mas.Vnr.Type     2925 non-null   object \n",
      " 25  Mas.Vnr.Area     2925 non-null   float64\n",
      " 26  Exter.Qual       2925 non-null   object \n",
      " 27  Exter.Cond       2925 non-null   object \n",
      " 28  Foundation       2925 non-null   object \n",
      " 29  Bsmt.Qual        2925 non-null   object \n",
      " 30  Bsmt.Cond        2925 non-null   object \n",
      " 31  Bsmt.Exposure    2925 non-null   object \n",
      " 32  BsmtFin.Type.1   2925 non-null   object \n",
      " 33  BsmtFin.SF.1     2925 non-null   float64\n",
      " 34  BsmtFin.Type.2   2925 non-null   object \n",
      " 35  BsmtFin.SF.2     2925 non-null   float64\n",
      " 36  Bsmt.Unf.SF      2925 non-null   float64\n",
      " 37  Total.Bsmt.SF    2925 non-null   float64\n",
      " 38  Heating          2925 non-null   object \n",
      " 39  Heating.QC       2925 non-null   object \n",
      " 40  Central.Air      2925 non-null   object \n",
      " 41  Electrical       2925 non-null   object \n",
      " 42  X1st.Flr.SF      2925 non-null   int64  \n",
      " 43  X2nd.Flr.SF      2925 non-null   int64  \n",
      " 44  Low.Qual.Fin.SF  2925 non-null   int64  \n",
      " 45  Gr.Liv.Area      2925 non-null   int64  \n",
      " 46  Bsmt.Full.Bath   2925 non-null   float64\n",
      " 47  Bsmt.Half.Bath   2925 non-null   float64\n",
      " 48  Full.Bath        2925 non-null   int64  \n",
      " 49  Half.Bath        2925 non-null   int64  \n",
      " 50  Bedroom.AbvGr    2925 non-null   int64  \n",
      " 51  Kitchen.AbvGr    2925 non-null   int64  \n",
      " 52  Kitchen.Qual     2925 non-null   object \n",
      " 53  TotRms.AbvGrd    2925 non-null   int64  \n",
      " 54  Functional       2925 non-null   object \n",
      " 55  Fireplaces       2925 non-null   int64  \n",
      " 56  Fireplace.Qu     1505 non-null   object \n",
      " 57  Garage.Type      2925 non-null   object \n",
      " 58  Garage.Yr.Blt    2925 non-null   float64\n",
      " 59  Garage.Finish    2925 non-null   object \n",
      " 60  Garage.Cars      2925 non-null   float64\n",
      " 61  Garage.Area      2925 non-null   float64\n",
      " 62  Garage.Qual      2925 non-null   object \n",
      " 63  Garage.Cond      2925 non-null   object \n",
      " 64  Paved.Drive      2925 non-null   object \n",
      " 65  Wood.Deck.SF     2925 non-null   int64  \n",
      " 66  Open.Porch.SF    2925 non-null   int64  \n",
      " 67  Enclosed.Porch   2925 non-null   int64  \n",
      " 68  X3Ssn.Porch      2925 non-null   int64  \n",
      " 69  Screen.Porch     2925 non-null   int64  \n",
      " 70  Pool.Area        2925 non-null   int64  \n",
      " 71  Misc.Val         2925 non-null   int64  \n",
      " 72  Mo.Sold          2925 non-null   int64  \n",
      " 73  Yr.Sold          2925 non-null   int64  \n",
      " 74  Sale.Type        2925 non-null   object \n",
      " 75  Sale.Condition   2925 non-null   object \n",
      " 76  SalePrice        2925 non-null   int64  \n",
      "dtypes: float64(11), int64(26), object(40)\n",
      "memory usage: 1.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c7e97c81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MS.SubClass</th>\n",
       "      <th>MS.Zoning</th>\n",
       "      <th>Street</th>\n",
       "      <th>Lot.Shape</th>\n",
       "      <th>Land.Contour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>Lot.Config</th>\n",
       "      <th>Land.Slope</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Condition.1</th>\n",
       "      <th>...</th>\n",
       "      <th>Kitchen.Qual</th>\n",
       "      <th>Functional</th>\n",
       "      <th>Fireplace.Qu</th>\n",
       "      <th>Garage.Type</th>\n",
       "      <th>Garage.Finish</th>\n",
       "      <th>Garage.Qual</th>\n",
       "      <th>Garage.Cond</th>\n",
       "      <th>Paved.Drive</th>\n",
       "      <th>Sale.Type</th>\n",
       "      <th>Sale.Condition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NAmes</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Typ</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>Fin</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>P</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>RH</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NAmes</td>\n",
       "      <td>Feedr</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Typ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>Unf</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NAmes</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Typ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>Unf</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NAmes</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Typ</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>Fin</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Gilbert</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Typ</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>Fin</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2925</th>\n",
       "      <td>80</td>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>CulDSac</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Mitchel</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Typ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Detchd</td>\n",
       "      <td>Unf</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2926</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Low</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Mod</td>\n",
       "      <td>Mitchel</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Typ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>Unf</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2927</th>\n",
       "      <td>85</td>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Mitchel</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Typ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Mod</td>\n",
       "      <td>Mitchel</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Typ</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>RFn</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Mod</td>\n",
       "      <td>Mitchel</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Typ</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>Fin</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2925 rows Ã— 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     MS.SubClass MS.Zoning Street Lot.Shape Land.Contour Utilities Lot.Config  \\\n",
       "0             20        RL   Pave       IR1          Lvl    AllPub     Corner   \n",
       "1             20        RH   Pave       Reg          Lvl    AllPub     Inside   \n",
       "2             20        RL   Pave       IR1          Lvl    AllPub     Corner   \n",
       "3             20        RL   Pave       Reg          Lvl    AllPub     Corner   \n",
       "4             60        RL   Pave       IR1          Lvl    AllPub     Inside   \n",
       "...          ...       ...    ...       ...          ...       ...        ...   \n",
       "2925          80        RL   Pave       IR1          Lvl    AllPub    CulDSac   \n",
       "2926          20        RL   Pave       IR1          Low    AllPub     Inside   \n",
       "2927          85        RL   Pave       Reg          Lvl    AllPub     Inside   \n",
       "2928          20        RL   Pave       Reg          Lvl    AllPub     Inside   \n",
       "2929          60        RL   Pave       Reg          Lvl    AllPub     Inside   \n",
       "\n",
       "     Land.Slope Neighborhood Condition.1  ... Kitchen.Qual Functional  \\\n",
       "0           Gtl        NAmes        Norm  ...           TA        Typ   \n",
       "1           Gtl        NAmes       Feedr  ...           TA        Typ   \n",
       "2           Gtl        NAmes        Norm  ...           Gd        Typ   \n",
       "3           Gtl        NAmes        Norm  ...           Ex        Typ   \n",
       "4           Gtl      Gilbert        Norm  ...           TA        Typ   \n",
       "...         ...          ...         ...  ...          ...        ...   \n",
       "2925        Gtl      Mitchel        Norm  ...           TA        Typ   \n",
       "2926        Mod      Mitchel        Norm  ...           TA        Typ   \n",
       "2927        Gtl      Mitchel        Norm  ...           TA        Typ   \n",
       "2928        Mod      Mitchel        Norm  ...           TA        Typ   \n",
       "2929        Mod      Mitchel        Norm  ...           TA        Typ   \n",
       "\n",
       "     Fireplace.Qu Garage.Type Garage.Finish Garage.Qual Garage.Cond  \\\n",
       "0              Gd      Attchd           Fin          TA          TA   \n",
       "1             NaN      Attchd           Unf          TA          TA   \n",
       "2             NaN      Attchd           Unf          TA          TA   \n",
       "3              TA      Attchd           Fin          TA          TA   \n",
       "4              TA      Attchd           Fin          TA          TA   \n",
       "...           ...         ...           ...         ...         ...   \n",
       "2925          NaN      Detchd           Unf          TA          TA   \n",
       "2926          NaN      Attchd           Unf          TA          TA   \n",
       "2927          NaN        None          None        None        None   \n",
       "2928           TA      Attchd           RFn          TA          TA   \n",
       "2929           TA      Attchd           Fin          TA          TA   \n",
       "\n",
       "     Paved.Drive Sale.Type Sale.Condition  \n",
       "0              P       WD          Normal  \n",
       "1              Y       WD          Normal  \n",
       "2              Y       WD          Normal  \n",
       "3              Y       WD          Normal  \n",
       "4              Y       WD          Normal  \n",
       "...          ...       ...            ...  \n",
       "2925           Y       WD          Normal  \n",
       "2926           Y       WD          Normal  \n",
       "2927           Y       WD          Normal  \n",
       "2928           Y       WD          Normal  \n",
       "2929           Y       WD          Normal  \n",
       "\n",
       "[2925 rows x 40 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Creating Dummy Variables\n",
    "df.select_dtypes(include='object')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d535c3bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_num= df.select_dtypes(exclude=\"object\")\n",
    "df_obj= df.select_dtypes(include=\"object\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b2fc5e69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2925 entries, 0 to 2929\n",
      "Data columns (total 37 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   Order            2925 non-null   int64  \n",
      " 1   Lot.Frontage     2925 non-null   float64\n",
      " 2   Lot.Area         2925 non-null   int64  \n",
      " 3   Overall.Qual     2925 non-null   int64  \n",
      " 4   Overall.Cond     2925 non-null   int64  \n",
      " 5   Year.Built       2925 non-null   int64  \n",
      " 6   Year.Remod.Add   2925 non-null   int64  \n",
      " 7   Mas.Vnr.Area     2925 non-null   float64\n",
      " 8   BsmtFin.SF.1     2925 non-null   float64\n",
      " 9   BsmtFin.SF.2     2925 non-null   float64\n",
      " 10  Bsmt.Unf.SF      2925 non-null   float64\n",
      " 11  Total.Bsmt.SF    2925 non-null   float64\n",
      " 12  X1st.Flr.SF      2925 non-null   int64  \n",
      " 13  X2nd.Flr.SF      2925 non-null   int64  \n",
      " 14  Low.Qual.Fin.SF  2925 non-null   int64  \n",
      " 15  Gr.Liv.Area      2925 non-null   int64  \n",
      " 16  Bsmt.Full.Bath   2925 non-null   float64\n",
      " 17  Bsmt.Half.Bath   2925 non-null   float64\n",
      " 18  Full.Bath        2925 non-null   int64  \n",
      " 19  Half.Bath        2925 non-null   int64  \n",
      " 20  Bedroom.AbvGr    2925 non-null   int64  \n",
      " 21  Kitchen.AbvGr    2925 non-null   int64  \n",
      " 22  TotRms.AbvGrd    2925 non-null   int64  \n",
      " 23  Fireplaces       2925 non-null   int64  \n",
      " 24  Garage.Yr.Blt    2925 non-null   float64\n",
      " 25  Garage.Cars      2925 non-null   float64\n",
      " 26  Garage.Area      2925 non-null   float64\n",
      " 27  Wood.Deck.SF     2925 non-null   int64  \n",
      " 28  Open.Porch.SF    2925 non-null   int64  \n",
      " 29  Enclosed.Porch   2925 non-null   int64  \n",
      " 30  X3Ssn.Porch      2925 non-null   int64  \n",
      " 31  Screen.Porch     2925 non-null   int64  \n",
      " 32  Pool.Area        2925 non-null   int64  \n",
      " 33  Misc.Val         2925 non-null   int64  \n",
      " 34  Mo.Sold          2925 non-null   int64  \n",
      " 35  Yr.Sold          2925 non-null   int64  \n",
      " 36  SalePrice        2925 non-null   int64  \n",
      "dtypes: float64(11), int64(26)\n",
      "memory usage: 932.9 KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2925 entries, 0 to 2929\n",
      "Data columns (total 40 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   MS.SubClass     2925 non-null   object\n",
      " 1   MS.Zoning       2925 non-null   object\n",
      " 2   Street          2925 non-null   object\n",
      " 3   Lot.Shape       2925 non-null   object\n",
      " 4   Land.Contour    2925 non-null   object\n",
      " 5   Utilities       2925 non-null   object\n",
      " 6   Lot.Config      2925 non-null   object\n",
      " 7   Land.Slope      2925 non-null   object\n",
      " 8   Neighborhood    2925 non-null   object\n",
      " 9   Condition.1     2925 non-null   object\n",
      " 10  Condition.2     2925 non-null   object\n",
      " 11  Bldg.Type       2925 non-null   object\n",
      " 12  House.Style     2925 non-null   object\n",
      " 13  Roof.Style      2925 non-null   object\n",
      " 14  Roof.Matl       2925 non-null   object\n",
      " 15  Exterior.1st    2925 non-null   object\n",
      " 16  Exterior.2nd    2925 non-null   object\n",
      " 17  Mas.Vnr.Type    2925 non-null   object\n",
      " 18  Exter.Qual      2925 non-null   object\n",
      " 19  Exter.Cond      2925 non-null   object\n",
      " 20  Foundation      2925 non-null   object\n",
      " 21  Bsmt.Qual       2925 non-null   object\n",
      " 22  Bsmt.Cond       2925 non-null   object\n",
      " 23  Bsmt.Exposure   2925 non-null   object\n",
      " 24  BsmtFin.Type.1  2925 non-null   object\n",
      " 25  BsmtFin.Type.2  2925 non-null   object\n",
      " 26  Heating         2925 non-null   object\n",
      " 27  Heating.QC      2925 non-null   object\n",
      " 28  Central.Air     2925 non-null   object\n",
      " 29  Electrical      2925 non-null   object\n",
      " 30  Kitchen.Qual    2925 non-null   object\n",
      " 31  Functional      2925 non-null   object\n",
      " 32  Fireplace.Qu    1505 non-null   object\n",
      " 33  Garage.Type     2925 non-null   object\n",
      " 34  Garage.Finish   2925 non-null   object\n",
      " 35  Garage.Qual     2925 non-null   object\n",
      " 36  Garage.Cond     2925 non-null   object\n",
      " 37  Paved.Drive     2925 non-null   object\n",
      " 38  Sale.Type       2925 non-null   object\n",
      " 39  Sale.Condition  2925 non-null   object\n",
      "dtypes: object(40)\n",
      "memory usage: 1001.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df_num.info()\n",
    "df_obj.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e5ecdd19",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting:\n",
    "df_obj= pd.get_dummies(df_obj, drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "8a292f9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2925, 237)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_obj.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8ee57304",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order</th>\n",
       "      <th>Lot.Frontage</th>\n",
       "      <th>Lot.Area</th>\n",
       "      <th>Overall.Qual</th>\n",
       "      <th>Overall.Cond</th>\n",
       "      <th>Year.Built</th>\n",
       "      <th>Year.Remod.Add</th>\n",
       "      <th>Mas.Vnr.Area</th>\n",
       "      <th>BsmtFin.SF.1</th>\n",
       "      <th>BsmtFin.SF.2</th>\n",
       "      <th>...</th>\n",
       "      <th>Wood.Deck.SF</th>\n",
       "      <th>Open.Porch.SF</th>\n",
       "      <th>Enclosed.Porch</th>\n",
       "      <th>X3Ssn.Porch</th>\n",
       "      <th>Screen.Porch</th>\n",
       "      <th>Pool.Area</th>\n",
       "      <th>Misc.Val</th>\n",
       "      <th>Mo.Sold</th>\n",
       "      <th>Yr.Sold</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>141.0</td>\n",
       "      <td>31770</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>1960</td>\n",
       "      <td>1960</td>\n",
       "      <td>112.0</td>\n",
       "      <td>639.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>210</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2010</td>\n",
       "      <td>215000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>80.0</td>\n",
       "      <td>11622</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1961</td>\n",
       "      <td>1961</td>\n",
       "      <td>0.0</td>\n",
       "      <td>468.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>...</td>\n",
       "      <td>140</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>105000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14267</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1958</td>\n",
       "      <td>1958</td>\n",
       "      <td>108.0</td>\n",
       "      <td>923.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>393</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12500</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>172000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>93.0</td>\n",
       "      <td>11160</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>1968</td>\n",
       "      <td>1968</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1065.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2010</td>\n",
       "      <td>244000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13830</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1997</td>\n",
       "      <td>1998</td>\n",
       "      <td>0.0</td>\n",
       "      <td>791.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>212</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>189900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order  Lot.Frontage  Lot.Area  Overall.Qual  Overall.Cond  Year.Built  \\\n",
       "0      1         141.0     31770             6             5        1960   \n",
       "1      2          80.0     11622             5             6        1961   \n",
       "2      3          81.0     14267             6             6        1958   \n",
       "3      4          93.0     11160             7             5        1968   \n",
       "4      5          74.0     13830             5             5        1997   \n",
       "\n",
       "   Year.Remod.Add  Mas.Vnr.Area  BsmtFin.SF.1  BsmtFin.SF.2  ...  \\\n",
       "0            1960         112.0         639.0           0.0  ...   \n",
       "1            1961           0.0         468.0         144.0  ...   \n",
       "2            1958         108.0         923.0           0.0  ...   \n",
       "3            1968           0.0        1065.0           0.0  ...   \n",
       "4            1998           0.0         791.0           0.0  ...   \n",
       "\n",
       "   Wood.Deck.SF  Open.Porch.SF  Enclosed.Porch  X3Ssn.Porch  Screen.Porch  \\\n",
       "0           210             62               0            0             0   \n",
       "1           140              0               0            0           120   \n",
       "2           393             36               0            0             0   \n",
       "3             0              0               0            0             0   \n",
       "4           212             34               0            0             0   \n",
       "\n",
       "   Pool.Area  Misc.Val  Mo.Sold  Yr.Sold  SalePrice  \n",
       "0          0         0        5     2010     215000  \n",
       "1          0         0        6     2010     105000  \n",
       "2          0     12500        6     2010     172000  \n",
       "3          0         0        4     2010     244000  \n",
       "4          0         0        3     2010     189900  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_num.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "550ac455",
   "metadata": {},
   "outputs": [],
   "source": [
    "Final_df= pd.concat([df_num, df_obj], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a7ffca3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order</th>\n",
       "      <th>Lot.Frontage</th>\n",
       "      <th>Lot.Area</th>\n",
       "      <th>Overall.Qual</th>\n",
       "      <th>Overall.Cond</th>\n",
       "      <th>Year.Built</th>\n",
       "      <th>Year.Remod.Add</th>\n",
       "      <th>Mas.Vnr.Area</th>\n",
       "      <th>BsmtFin.SF.1</th>\n",
       "      <th>BsmtFin.SF.2</th>\n",
       "      <th>...</th>\n",
       "      <th>Sale.Type_ConLw</th>\n",
       "      <th>Sale.Type_New</th>\n",
       "      <th>Sale.Type_Oth</th>\n",
       "      <th>Sale.Type_VWD</th>\n",
       "      <th>Sale.Type_WD</th>\n",
       "      <th>Sale.Condition_AdjLand</th>\n",
       "      <th>Sale.Condition_Alloca</th>\n",
       "      <th>Sale.Condition_Family</th>\n",
       "      <th>Sale.Condition_Normal</th>\n",
       "      <th>Sale.Condition_Partial</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>141.0</td>\n",
       "      <td>31770</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>1960</td>\n",
       "      <td>1960</td>\n",
       "      <td>112.0</td>\n",
       "      <td>639.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>80.0</td>\n",
       "      <td>11622</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1961</td>\n",
       "      <td>1961</td>\n",
       "      <td>0.0</td>\n",
       "      <td>468.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14267</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1958</td>\n",
       "      <td>1958</td>\n",
       "      <td>108.0</td>\n",
       "      <td>923.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>93.0</td>\n",
       "      <td>11160</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>1968</td>\n",
       "      <td>1968</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1065.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13830</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1997</td>\n",
       "      <td>1998</td>\n",
       "      <td>0.0</td>\n",
       "      <td>791.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 274 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order  Lot.Frontage  Lot.Area  Overall.Qual  Overall.Cond  Year.Built  \\\n",
       "0      1         141.0     31770             6             5        1960   \n",
       "1      2          80.0     11622             5             6        1961   \n",
       "2      3          81.0     14267             6             6        1958   \n",
       "3      4          93.0     11160             7             5        1968   \n",
       "4      5          74.0     13830             5             5        1997   \n",
       "\n",
       "   Year.Remod.Add  Mas.Vnr.Area  BsmtFin.SF.1  BsmtFin.SF.2  ...  \\\n",
       "0            1960         112.0         639.0           0.0  ...   \n",
       "1            1961           0.0         468.0         144.0  ...   \n",
       "2            1958         108.0         923.0           0.0  ...   \n",
       "3            1968           0.0        1065.0           0.0  ...   \n",
       "4            1998           0.0         791.0           0.0  ...   \n",
       "\n",
       "   Sale.Type_ConLw  Sale.Type_New  Sale.Type_Oth  Sale.Type_VWD  \\\n",
       "0                0              0              0              0   \n",
       "1                0              0              0              0   \n",
       "2                0              0              0              0   \n",
       "3                0              0              0              0   \n",
       "4                0              0              0              0   \n",
       "\n",
       "   Sale.Type_WD   Sale.Condition_AdjLand  Sale.Condition_Alloca  \\\n",
       "0              1                       0                      0   \n",
       "1              1                       0                      0   \n",
       "2              1                       0                      0   \n",
       "3              1                       0                      0   \n",
       "4              1                       0                      0   \n",
       "\n",
       "   Sale.Condition_Family  Sale.Condition_Normal  Sale.Condition_Partial  \n",
       "0                      0                      1                       0  \n",
       "1                      0                      1                       0  \n",
       "2                      0                      1                       0  \n",
       "3                      0                      1                       0  \n",
       "4                      0                      1                       0  \n",
       "\n",
       "[5 rows x 274 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Final_df.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
